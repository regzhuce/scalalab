
import static com.nr.NRUtil.buildMatrix
import static java.lang.Math.abs

import com.nr.ci.Phylo_clc


NSEQ=16; NCHAR=16
    sbeps=1.0e-15
    
    ssequence = [
      3,1,1,1,1,1,1,1,0,1,1,1,1,1,2,2,
      3,1,1,1,1,1,1,1,0,1,1,1,1,1,2,3,
      3,0,1,1,1,1,1,1,0,1,1,1,1,1,3,1,
      3,3,1,1,1,1,1,1,0,1,1,1,1,1,3,1,
      3,1,1,1,2,1,1,1,2,1,1,3,1,1,1,1,
      3,1,1,1,0,1,1,1,2,1,1,3,1,1,1,1,
      3,1,1,1,1,1,1,1,2,2,1,0,1,1,1,1,
      3,1,1,1,1,1,1,1,2,0,1,0,1,1,1,1,
      2,1,1,0,1,1,3,1,1,1,1,1,3,1,1,1,
      2,1,1,0,1,1,3,1,1,1,1,1,2,1,1,1,
      2,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,
      2,1,1,0,1,1,0,1,1,1,3,1,1,1,1,1,
      2,1,3,2,1,1,1,0,1,1,1,1,1,1,1,1,
      2,1,0,2,1,1,1,0,1,1,1,1,1,1,1,1,
      2,1,1,2,1,3,1,3,1,1,1,1,1,1,1,1,
      2,1,1,2,1,0,1,3,1,1,1,1,1,1,1,1
    ] as int[] 
    
    sequence = buildMatrix(NSEQ,NCHAR,ssequence)
    dist = new double[NSEQ][NSEQ]
    globalflag=false

    
    // Test Phylo_clc
    println("Testing Phylo_clc")


    // Calculate hamming distance for all sequence pairs
    for (i=0;i<NSEQ;i++) {
      for (j=0;j<NSEQ;j++) {
        hamming=0;
        for (k=0;k<NCHAR;k++) {
          if (sequence[i][k] != sequence[j][k]) hamming++;
        }
        dist[i][j]=(double)(hamming);
      }
    }

    // Create the agglomerative phylogenetic tree
tree = new Phylo_clc(dist)

    // Inspect the tree
    localflag = tree.root != 30;
    globalflag = globalflag || localflag;
    if (localflag) {
      fail("*** Phylo_clc: Tree does not have expected number of nodes");
      
    }

    localflag = (tree.t[tree.root].nel != NSEQ)
    globalflag = globalflag || localflag
    if (localflag) {
      fail("*** Phylo_clc: Root node does not contain all the elements");
      
    }

    localflag = (tree.t[tree.t[tree.root].ldau].nel != NSEQ/2)
    globalflag = globalflag || localflag
    if (localflag) {
      fail("*** Phylo_clc: Left side of tree does not report half the elements");
      
    }

    localflag = (tree.t[tree.t[tree.root].rdau].nel != NSEQ/2)
    globalflag = globalflag || localflag
    if (localflag) {
      fail("*** Phylo_clc: Right side of tree does not report half the elements");
      
    }

    localflag = (tree.t[tree.root].modist != 0.0)
    globalflag = globalflag || localflag
    if (localflag) {
      fail("*** Phylo_clc: Mother distance of root is not zero");
      
    }

    for (i=0;i<NSEQ;i++) {
      mother = tree.t[i].mo;
      
      localflag = (tree.t[tree.t[mother].ldau].modist != tree.t[tree.t[mother].rdau].modist);
      globalflag = globalflag || localflag;
      if (localflag) {
        fail("*** Phylo_clc: Left and right daughter of a leaf reported different mother distances");
        
      }

      localflag = (tree.t[i].modist != 0.5);
      globalflag = globalflag || localflag;
      if (localflag) {
        fail("*** Phylo_clc: For this tree, all mother distances should be 0.5");
        
      }

      ndif=0;
      for (j=0;j<NCHAR;j++) 
        if (sequence[tree.t[mother].ldau][j] != sequence[tree.t[mother].rdau][j]) ndif++;
//      System.out.printf(double(ndif)/2.0);

      localflag = abs(tree.t[tree.t[mother].ldau].modist - 0.5*ndif) > sbeps;
      globalflag = globalflag || localflag;
      if (localflag) {
        fail("*** Phylo_clc: Hamming distance between two daughters is not twice the mother distance");
        
      }
    }

//    System.out.println("Tree:");
//    print_tree(tree,tree.root);

//    System.out.println("Check expected order of leafs on tree:");
    Check_tree ct = new Check_tree(tree);
    ct.test(tree.root);

    localflag = ct.flag;
    globalflag = globalflag || localflag;
    if (localflag) {
      fail("*** Phylo_clc: Leaves of the tree were not encountered in the expected order");
      
    }

    if (globalflag) System.out.println("Failed\n");
    else System.out.println("Passed\n");

  

  class Check_tree {
    int i;
    boolean flag;
    Phylo_clc tree;

    Check_tree(Phylo_clc ttree) {
      tree = ttree;
      i=0;
      flag = false;
    }
    void test(int node) {
      if (tree.t[node].ldau != -1) {
        test(tree.t[node].ldau);
      } else { 
        flag = flag || (node != i++);
        return;
      }

      if (tree.t[node].rdau != -1) {
        test(tree.t[node].rdau);
      } else {
        flag = flag || (node != i++);
        return;
      }
    }
  }


