
import static com.nr.test.NRTestUtil.matmul
import static com.nr.test.NRTestUtil.matsub
import static com.nr.test.NRTestUtil.maxel
import static com.nr.test.NRTestUtil.ranmat

diag=10.0
int N=50 // M=30 not use it.
    a = new double[N][N]
    b = new double[N][N]
    globalflag=false
    ranmat(a,diag)
    ranmat(b)

    

    // Test SVD (not very deeply, however)
    println("Testing SVD")
    svd = new SVD(a)
    x = new double[b.length][b[0].length]
    svd.solve(b, x)
    sbeps = 1.e-14
    localflag = maxel(matsub(matmul(a,x),b)) > sbeps
    globalflag = globalflag || localflag
    if (localflag) {
      fail("*** SVD: Inconsistent solution vector");
      
    }

println("svd: rank = " +svd.rank() + "  nullity = " + svd.nullity() )
    localflag = (svd.rank() != 50 || svd.nullity() != 0)
    globalflag = globalflag || localflag
    if (localflag) {
      fail("*** SVD: Unexpected rank or nullity in original matrix")
      
    }

    for (int i=0;i<N;i++) {       // Decrease the matrix rank
      a[3][i]=a[2][i]-a[1][i];
      a[4][i]=0.0;
    }
    svd2 = new SVD(a)
println("svd: rank = " + svd2.rank() + "  nullity = " + svd2.nullity();
    localflag = (svd2.rank() != 48 || svd2.nullity() != 2)
    globalflag = globalflag || localflag
    if (localflag) {
      fail("*** SVD: Unexpected rank or nullity in modified matrix")
      
    }
      
    if (globalflag) println("Failed\n")
    else println("Passed\n");
  


